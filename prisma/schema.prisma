// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  clerkId      String  @unique
  name         String?
  email        String  @unique
  profileImage String?
  tier         String? @default("Free")
  credits      String? @default("10")

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  localGoogleId    String?  @unique
  googleResourceId String?  @unique

  LocalGoogleCredential LocalGoogleCredential?
  DiscordWebhook        DiscordWebhook[]
  Notion                Notion[]
  Slack                 Slack[]
  connections           Connections[]
  workflows             Workflows[]
  nodeTemplates         NodeTemplate[]
}

model LocalGoogleCredential {
  id          String @id @default(uuid())
  accessToken String @unique

  folderId   String?
  pageToken  String?
  channelId  String  @unique @default(uuid())
  subscribed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  user        User          @relation(fields: [userId], references: [clerkId])
  userId      String
  connections Connections[]
}

model Slack {
  id String @id @default(uuid())

  appId            String
  authedUserId     String
  authedUserToken  String @unique
  slackAccessToken String @unique
  botUserId        String
  teamId           String
  teamName         String

  User        User          @relation(fields: [userId], references: [clerkId])
  userId      String
  connections Connections[]
}

model Notion {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  workspaceId   String        @unique
  databaseId    String        @unique
  workspaceName String
  workspaceIcon String
  User          User          @relation(fields: [userId], references: [clerkId])
  userId        String
  connections   Connections[]
}

model Connections {
  id               String          @id @default(uuid())
  type             String          @unique
  DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  discordWebhookId String?
  Notion           Notion?         @relation(fields: [notionId], references: [id])
  notionId         String?
  User             User?           @relation(fields: [userId], references: [clerkId])
  userId           String?
  Slack            Slack?          @relation(fields: [slackId], references: [id])
  slackId          String?
}

model Workflows {
  id                String   @id @default(uuid())
  nodes             String?
  edges             String?
  name              String
  slackAccessToken  String?
  notionAccessToken String?
  flowPath          String?
  cronPath          String?
  publish           Boolean? @default(false)
  description       String
  User              User     @relation(fields: [userId], references: [clerkId])
  userId            String
  nodeTemplates     NodeTemplate[]
}


model NodeTemplate {
  id                String   @id @default(uuid())
  nodeId            String   @unique
  type              String
  content           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  slackChannels     String[]
  notionDbId        String?
  notionTableId     String?
  notionPageId      String?
  notionTableName   String?
  notionPageName    String?
  notionActionType  String?
  accessToken       String?
  // Relation to Workflows
  workflow   Workflows @relation(fields: [workflowId], references: [id])
  workflowId        String

  // Relation to User
  user       User      @relation(fields: [userId], references: [clerkId])
  userId            String
}




//npx prisma generate
//npx prisma db push 


//Code below is the original schema. It is kept here for reference. 
//It is not used in the project. 
// model Workflows {
//   id                String   @id @default(uuid())
//   nodes             String?
//   edges             String?
//   name              String
//   discordTemplate   String? //this is where the template content is stored
//   notionTemplate    String?//this is where the template content is stored
//   slackTemplate     String?//this is where the template content is stored
//   slackChannels     String[]
//   slackAccessToken  String?
//   notionAccessToken String?
//   notionDbId        String?
//   flowPath          String?
//   cronPath          String?
//   publish           Boolean? @default(false)
//   description       String
//   notionTableId     String?
//   notionPageId      String?
//   notionTableName   String?
//   notionPageName    String?
//   notionActionType  String?
//   User              User     @relation(fields: [userId], references: [clerkId])
//   userId            String
//   nodeTemplates     NodeTemplate[]
// }